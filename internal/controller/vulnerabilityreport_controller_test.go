package controller

import (
	"context"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"github.com/google/uuid"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	storagev1alpha1 "github.com/rancher/sbombastic/api/storage/v1alpha1"
	"github.com/rancher/sbombastic/api/v1alpha1"
)

var _ = Describe("VulnerabilityReport Controller", func() {
	Context("HappyPath", func() {
		var cancel context.CancelFunc

		// Unlike our other controller tests that use field selectors for lookups,
		// this reconciler relies on an indexer to find ScanJobs by metadata.uid.
		// Since metadata.uid doesn't support field selectors and the indexer
		// requires a manager to function, we must run these tests with a full
		// manager setup.
		BeforeEach(func() {
			var ctx context.Context // Create a new context for the manager because the one provided by Ginkgo is not suitable for long-running operations.
			ctx, cancel = context.WithCancel(context.Background())
			mgr, err := ctrl.NewManager(cfg, ctrl.Options{
				Scheme: k8sClient.Scheme(),
			})
			Expect(err).ToNot(HaveOccurred())

			err = SetupIndexer(ctx, mgr)
			Expect(err).ToNot(HaveOccurred())

			err = (&VulnerabilityReportReconciler{
				Client: mgr.GetClient(),
				Scheme: mgr.GetScheme(),
			}).SetupWithManager(mgr)
			Expect(err).ToNot(HaveOccurred())

			// Start manager in background
			go func() {
				defer GinkgoRecover()
				err = mgr.Start(ctx)
				Expect(err).ToNot(HaveOccurred())
			}()
		})

		AfterEach(func() {
			cancel()
		})

		When("All VulnerabilityReports are created for a ScanJob", func() {
			var scanJob *v1alpha1.ScanJob

			BeforeEach(func(ctx context.Context) {
				By("Creating a ScanJob with 2 total images")
				scanJob = &v1alpha1.ScanJob{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-scanjob-complete-" + uuid.New().String()[:8],
						Namespace: "default",
					},
					Spec: v1alpha1.ScanJobSpec{
						Registry: "test-registry",
					},
				}
				Expect(k8sClient.Create(ctx, scanJob)).To(Succeed())

				By("Setting the ImagesCount")
				scanJob.Status.ImagesCount = 2
				Expect(k8sClient.Status().Update(ctx, scanJob)).To(Succeed())
			})

			It("should mark the ScanJob as complete", func(ctx context.Context) {
				By("Creating the first VulnerabilityReport")
				firstVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: string(scanJob.UID),
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &firstVulnerabilityReport)).To(Succeed())

				By("Waiting for the first VulnerabilityReport to be processed")
				Eventually(func() int {
					updatedScanJob := &v1alpha1.ScanJob{}
					err := k8sClient.Get(ctx, types.NamespacedName{
						Name:      scanJob.Name,
						Namespace: scanJob.Namespace,
					}, updatedScanJob)
					if err != nil {
						return 0
					}
					return updatedScanJob.Status.ScannedImagesCount
				}, "10s").Should(Equal(1))

				By("Verifying the ScanJob is still in progress")
				updatedScanJob := &v1alpha1.ScanJob{}
				err := k8sClient.Get(ctx, types.NamespacedName{
					Name:      scanJob.Name,
					Namespace: scanJob.Namespace,
				}, updatedScanJob)
				Expect(err).NotTo(HaveOccurred())
				Expect(updatedScanJob.Status.ScannedImagesCount).To(Equal(1))
				Expect(updatedScanJob.IsInProgress()).To(BeTrue())
				Expect(meta.FindStatusCondition(updatedScanJob.Status.Conditions, v1alpha1.ConditionTypeInProgress).Reason).To(Equal(v1alpha1.ReasonImageScanInProgress))

				By("Creating the second VulnerabilityReport")
				secondVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: string(scanJob.UID),
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &secondVulnerabilityReport)).To(Succeed())

				By("Waiting for the ScanJob to be marked as complete")
				finalScanJob := &v1alpha1.ScanJob{}
				Eventually(func() bool {
					err = k8sClient.Get(ctx, types.NamespacedName{
						Name:      scanJob.Name,
						Namespace: scanJob.Namespace,
					}, finalScanJob)
					if err != nil {
						return false
					}
					return finalScanJob.IsComplete()
				}).Should(BeTrue())

				By("Verifying final state")
				Expect(finalScanJob.Status.ScannedImagesCount).To(Equal(2))
				Expect(finalScanJob.IsComplete()).To(BeTrue())
				Expect(finalScanJob.Status.CompletionTime).NotTo(BeNil())
			})
		})
	})

	Context("Errors path", func() {
		When("A VulnerabilityReport references a non-existent ScanJob", func() {
			var reconciler VulnerabilityReportReconciler
			var vulnerabilityReport storagev1alpha1.VulnerabilityReport

			BeforeEach(func(ctx context.Context) {
				By("Creating a new VulnerabilityReportReconciler")
				reconciler = VulnerabilityReportReconciler{
					Client: k8sClient,
				}

				By("Creating a VulnerabilityReport with non-existent ScanJob")
				vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: "non-existent-uid",
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
			})

			It("should return an error", func(ctx context.Context) {
				By("Reconciling the VulnerabilityReport")
				_, err := reconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: types.NamespacedName{
						Name:      vulnerabilityReport.Name,
						Namespace: vulnerabilityReport.Namespace,
					},
				})
				Expect(err).To(HaveOccurred())
				Expect(err.Error()).To(ContainSubstring("failed to get ScanJob"))
			})
		})

		When("A VulnerabilityReport does not have the required label", func() {
			var reconciler VulnerabilityReportReconciler
			var vulnerabilityReport storagev1alpha1.VulnerabilityReport

			BeforeEach(func(ctx context.Context) {
				By("Creating a new VulnerabilityReportReconciler")
				reconciler = VulnerabilityReportReconciler{
					Client: k8sClient,
				}

				By("Creating a VulnerabilityReport without ScanJob label")
				vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels:    map[string]string{},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
			})

			It("should return an error", func(ctx context.Context) {
				By("Reconciling the VulnerabilityReport")
				_, err := reconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: types.NamespacedName{
						Name:      vulnerabilityReport.Name,
						Namespace: vulnerabilityReport.Namespace,
					},
				})
				Expect(err).To(HaveOccurred())
				Expect(err.Error()).To(ContainSubstring("scan job UID not found in labels"))
			})
		})
	})
})
