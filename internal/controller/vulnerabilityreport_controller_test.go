package controller

import (
	"context"

	"github.com/aws/smithy-go/ptr"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"github.com/google/uuid"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/config"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	storagev1alpha1 "github.com/kubewarden/sbomscanner/api/storage/v1alpha1"
	"github.com/kubewarden/sbomscanner/api/v1alpha1"
)

var _ = Describe("VulnerabilityReport Controller", func() {
	var cancel context.CancelFunc
	var mgrClient client.Client

	// Unlike our other controller tests that use field selectors for lookups,
	// this reconciler relies on an indexer to find ScanJobs by metadata.uid.
	// Since metadata.uid doesn't support field selectors and the indexer
	// requires a manager to function, we must run these tests with a full
	// manager setup.
	BeforeEach(func() {
		var ctx context.Context
		ctx, cancel = context.WithCancel(context.Background())
		mgr, err := ctrl.NewManager(cfg, ctrl.Options{
			Scheme: k8sClient.Scheme(),
			Controller: config.Controller{
				SkipNameValidation: ptr.Bool(true),
			},
			// Disable metrics server in tests
			Metrics: metricsserver.Options{
				BindAddress: "0",
			},
			// Disable health probe server too
			HealthProbeBindAddress: "0",
		})
		Expect(err).ToNot(HaveOccurred())

		err = SetupIndexer(ctx, mgr)
		Expect(err).ToNot(HaveOccurred())

		reconciler := VulnerabilityReportReconciler{
			Client: mgr.GetClient(),
			Scheme: mgr.GetScheme(),
		}

		mgrClient = mgr.GetClient()

		err = reconciler.SetupWithManager(mgr)
		Expect(err).ToNot(HaveOccurred())

		// Start manager in background
		go func() {
			defer GinkgoRecover()
			err = mgr.Start(ctx)
			Expect(err).ToNot(HaveOccurred())
		}()
	})

	AfterEach(func() {
		cancel()
	})

	When("VulnerabilityReports are created during a succesfull Scan", func() {
		DescribeTable("All VulnerabilityReports are created for a ScanJob",
			func(ctx context.Context, setupScanJob func(*v1alpha1.ScanJob), expectScanJob func(*v1alpha1.ScanJob)) {
				By("Creating a ScanJob with 2 total images")
				scanJob := &v1alpha1.ScanJob{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-scanjob-" + uuid.New().String()[:8],
						Namespace: "default",
					},
					Spec: v1alpha1.ScanJobSpec{
						Registry: "test-registry",
					},
				}
				Expect(k8sClient.Create(ctx, scanJob)).To(Succeed())

				By("Setting up the initial ScanJob state")
				scanJob.Status.ImagesCount = 2
				setupScanJob(scanJob)
				Expect(k8sClient.Status().Update(ctx, scanJob)).To(Succeed())

				By("Creating the first VulnerabilityReport")
				firstVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: string(scanJob.UID),
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &firstVulnerabilityReport)).To(Succeed())

				By("Waiting for the first VulnerabilityReport to be processed")
				Eventually(func() int {
					updatedScanJob := &v1alpha1.ScanJob{}
					err := k8sClient.Get(ctx, types.NamespacedName{
						Name:      scanJob.Name,
						Namespace: scanJob.Namespace,
					}, updatedScanJob)
					if err != nil {
						return 0
					}
					return updatedScanJob.Status.ScannedImagesCount
				}, "10s").Should(Equal(1))

				By("Creating the second VulnerabilityReport")
				secondVulnerabilityReport := storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: string(scanJob.UID),
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &secondVulnerabilityReport)).To(Succeed())

				By("Waiting for the final count to be updated")
				finalScanJob := &v1alpha1.ScanJob{}
				Eventually(func() int {
					err := k8sClient.Get(ctx, types.NamespacedName{
						Name:      scanJob.Name,
						Namespace: scanJob.Namespace,
					}, finalScanJob)
					if err != nil {
						return 0
					}
					return finalScanJob.Status.ScannedImagesCount
				}, "10s").Should(Equal(2))

				By("Verifying final state")
				Expect(finalScanJob.Status.ScannedImagesCount).To(Equal(2))
				expectScanJob(finalScanJob)
			},
			Entry("should mark the ScanJob as complete when all reports are created",
				func(_ *v1alpha1.ScanJob) {
				},
				func(scanJob *v1alpha1.ScanJob) {
					Expect(scanJob.IsComplete()).To(BeTrue())
					Expect(scanJob.IsFailed()).To(BeFalse())
				},
			),
			Entry("should update count but preserve failed status when ScanJob is already failed",
				func(scanJob *v1alpha1.ScanJob) {
					scanJob.MarkFailed(v1alpha1.ReasonInternalError, "kaboom")
				},
				func(scanJob *v1alpha1.ScanJob) {
					Expect(scanJob.IsFailed()).To(BeTrue())
					Expect(scanJob.IsComplete()).To(BeFalse())
				},
			),
		)
	})

	Describe("VulnerabilityReports are reconciled with invalid ScanJob references", func() {
		When("A VulnerabilityReport references a non-existent ScanJob", func() {
			var vulnerabilityReport storagev1alpha1.VulnerabilityReport

			BeforeEach(func(ctx context.Context) {
				By("Creating a VulnerabilityReport with non-existent ScanJob")
				vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels: map[string]string{
							v1alpha1.LabelScanJobUIDKey: "non-existent-uid",
						},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
			})

			It("should skip reconciliation without error to avoid reconciliation loops", func(ctx context.Context) {
				By("Creating a VulnerabilityReport reconciler")
				reconciler := VulnerabilityReportReconciler{
					Client: mgrClient,
					Scheme: k8sClient.Scheme(),
				}

				By("Reconciling the VulnerabilityReport")
				result, err := reconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: types.NamespacedName{
						Name:      vulnerabilityReport.Name,
						Namespace: vulnerabilityReport.Namespace,
					},
				})
				Expect(err).ToNot(HaveOccurred())
				Expect(result).To(Equal(ctrl.Result{}))
			})
		})

		When("A VulnerabilityReport does not have the required ScanJob UID label", func() {
			var vulnerabilityReport storagev1alpha1.VulnerabilityReport

			BeforeEach(func(ctx context.Context) {
				By("Creating a VulnerabilityReport without ScanJob label")
				vulnerabilityReport = storagev1alpha1.VulnerabilityReport{
					ObjectMeta: metav1.ObjectMeta{
						Name:      uuid.New().String(),
						Namespace: "default",
						Labels:    map[string]string{},
					},
					Report: storagev1alpha1.Report{
						Results: []storagev1alpha1.Result{},
					},
				}
				Expect(k8sClient.Create(ctx, &vulnerabilityReport)).To(Succeed())
			})

			It("should skip reconciliation without error to avoid reconciliation loops", func(ctx context.Context) {
				By("Creating a VulnerabilityReport reconciler")
				reconciler := VulnerabilityReportReconciler{
					Client: mgrClient,
					Scheme: k8sClient.Scheme(),
				}

				By("Reconciling the VulnerabilityReport")
				result, err := reconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: types.NamespacedName{
						Name:      vulnerabilityReport.Name,
						Namespace: vulnerabilityReport.Namespace,
					},
				})
				Expect(err).ToNot(HaveOccurred())
				Expect(result).To(Equal(ctrl.Result{}))
			})
		})
	})
})
