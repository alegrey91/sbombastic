// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	v1 "github.com/google/go-containerregistry/pkg/v1"
	types "github.com/google/go-containerregistry/pkg/v1/types"
	mock "github.com/stretchr/testify/mock"
)

// ImageIndex is an autogenerated mock type for the ImageIndex type
type ImageIndex struct {
	mock.Mock
}

// Digest provides a mock function with given fields:
func (_m *ImageIndex) Digest() (v1.Hash, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Digest")
	}

	var r0 v1.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func() (v1.Hash, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() v1.Hash); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Hash)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Image provides a mock function with given fields: _a0
func (_m *ImageIndex) Image(_a0 v1.Hash) (v1.Image, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Image")
	}

	var r0 v1.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(v1.Hash) (v1.Image, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(v1.Hash) v1.Image); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(v1.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageIndex provides a mock function with given fields: _a0
func (_m *ImageIndex) ImageIndex(_a0 v1.Hash) (v1.ImageIndex, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ImageIndex")
	}

	var r0 v1.ImageIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(v1.Hash) (v1.ImageIndex, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(v1.Hash) v1.ImageIndex); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ImageIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(v1.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexManifest provides a mock function with given fields:
func (_m *ImageIndex) IndexManifest() (*v1.IndexManifest, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IndexManifest")
	}

	var r0 *v1.IndexManifest
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v1.IndexManifest, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v1.IndexManifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.IndexManifest)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaType provides a mock function with given fields:
func (_m *ImageIndex) MediaType() (types.MediaType, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MediaType")
	}

	var r0 types.MediaType
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.MediaType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.MediaType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.MediaType)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawManifest provides a mock function with given fields:
func (_m *ImageIndex) RawManifest() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawManifest")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with given fields:
func (_m *ImageIndex) Size() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageIndex creates a new instance of ImageIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageIndex {
	mock := &ImageIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
