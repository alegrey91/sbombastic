// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	name "github.com/google/go-containerregistry/pkg/name"
	mock "github.com/stretchr/testify/mock"

	registry "github.com/rancher/sbombastic/internal/handlers/registry"

	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Catalogue provides a mock function with given fields: ctx, _a1
func (_m *Client) Catalogue(ctx context.Context, _a1 name.Registry) ([]string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Catalogue")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, name.Registry) ([]string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, name.Registry) []string); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, name.Registry) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageDetails provides a mock function with given fields: ref, platform
func (_m *Client) GetImageDetails(ref name.Reference, platform *v1.Platform) (registry.ImageDetails, error) {
	ret := _m.Called(ref, platform)

	if len(ret) == 0 {
		panic("no return value specified for GetImageDetails")
	}

	var r0 registry.ImageDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Reference, *v1.Platform) (registry.ImageDetails, error)); ok {
		return rf(ref, platform)
	}
	if rf, ok := ret.Get(0).(func(name.Reference, *v1.Platform) registry.ImageDetails); ok {
		r0 = rf(ref, platform)
	} else {
		r0 = ret.Get(0).(registry.ImageDetails)
	}

	if rf, ok := ret.Get(1).(func(name.Reference, *v1.Platform) error); ok {
		r1 = rf(ref, platform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageIndex provides a mock function with given fields: ref
func (_m *Client) GetImageIndex(ref name.Reference) (v1.ImageIndex, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for GetImageIndex")
	}

	var r0 v1.ImageIndex
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Reference) (v1.ImageIndex, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(name.Reference) v1.ImageIndex); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ImageIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Reference) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositoryContents provides a mock function with given fields: ctx, repository
func (_m *Client) ListRepositoryContents(ctx context.Context, repository name.Repository) ([]string, error) {
	ret := _m.Called(ctx, repository)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositoryContents")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, name.Repository) ([]string, error)); ok {
		return rf(ctx, repository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, name.Repository) []string); ok {
		r0 = rf(ctx, repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, name.Repository) error); ok {
		r1 = rf(ctx, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
