/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Class string

// Enumeration of supported package classes
const (
	// Operating system packages (e.g., deb, rpm)
	OSPackagesClass = "os-pkgs"
	// Language-specific packages (e.g., npm, pip)
	LangPackagesClass = "lang-pkgs"
	// Standalone binaries not part of a package manager
	BinaryClass = "binary"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VulnerabilityReportList contains a list of ScanResult
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityReport `json:"items"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.registry`
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.registryURI`
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.repository`
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.tag`
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.platform`
// +kubebuilder:selectablefield:JSONPath=`.spec.imageMetadata.digest`

// VulnerabilityReport is the Schema for the scanresults API
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Report is the actual vulnerability scan report
	Report Report                    `json:"report"`
	Status VulnerabilityReportStatus `json:"status,omitempty"`
}

// Report contains metadata about the scanned image and a list of vulnerability
// results.
type Report struct {
	ImageMetadata ImageMetadata `json:"imageMetadata"`

	// Results per target (e.g., layer, package type)
	Results []Result `json:"results"`
}

// Result represents scan findings for a specific target and class of packages
type Result struct {
	// Target is the specific target scanned
	Target string `json:"target"`

	// Class is the classification of the target
	Class Class `json:"class"`

	// Type is the language type
	Type string `json:"type"`

	// Vulnerabilities found in this target
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// CVSS holds Common Vulnerability Scoring System data for a vulnerability.
type CVSS struct {
	// V3Vector string (e.g., "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H")
	V3Vector string `json:"v3vector"`

	// V3Score numerical score
	V3Score string `json:"v3score"`
}

// VEXStatus represents the status of a vulnerability as declared
// in a VEX document
type VEXStatus struct {
	// Repository providing the VEX document
	Repository string `json:"repository"`

	// VEX status (e.g., "not_affected", "fixed", "under_investigation")
	Status string `json:"status"`

	// Statement optionally explain statement from the VEX document
	Statement string `json:"statement"`
}

// Vulnerability contains detailed information about a single vulnerability
// found in a package
type Vulnerability struct {
	// CVE identifier
	CVE string `json:"cve"`

	// Title is the title of the vulnerability
	Title string `json:"title"`

	// PackageName is the name of the vulnerable package
	// (empty when Class is "binary")
	PackageName string `json:"packageName,omitempty"`

	// PackagePath is the path where the package was found
	// (equal to Target when Class is "binary").
	// trivy removes the "/" at the beginning of the path
	// so we have to restore it.
	PackagePath string `json:"packagePath,omitempty"`

	// PURL (Package URL) identify the package uniquely
	PURL string `json:"purl"`

	// InstalledVersion of the package that was found
	InstalledVersion string `json:"installedVersion"`

	// FixedVersions is the list of versions where the vulnerability is fixed
	FixedVersions []string `json:"fixedVersions,omitempty"`

	// DiffID of the image layer where the vulnerability was introduced
	DiffID string `json:"DiffID"`

	// Description of the vulnerability
	Description string `json:"description,omitempty"`

	// Severity rating (e.g., "HIGH", "MEDIUM")
	Severity string `json:"severity"`

	// References contains URLs for more information
	References []string `json:"references"`

	// CVSS scoring details
	CVSS map[string]CVSS `json:"cvss,omitempty"`

	// Suppressed identify when vulnerability has
	// been suppressed by VEX documents
	Suppressed bool `json:"suppressed"`

	// VEXStatus information
	VEXStatus *VEXStatus `json:"vexStatus,omitempty"`
}

// VulnerabilityReportStatus defines the observed state of ScanResult
type VulnerabilityReportStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

func (v *VulnerabilityReport) GetImageMetadata() ImageMetadata {
	return v.Report.ImageMetadata
}
