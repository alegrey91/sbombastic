// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// VulnerabilityApplyConfiguration represents a declarative configuration of the Vulnerability type for use
// with apply.
type VulnerabilityApplyConfiguration struct {
	CVE              *string                           `json:"cve,omitempty"`
	Title            *string                           `json:"title,omitempty"`
	PackageName      *string                           `json:"packageName,omitempty"`
	PackagePath      *string                           `json:"packagePath,omitempty"`
	PURL             *string                           `json:"purl,omitempty"`
	InstalledVersion *string                           `json:"installedVersion,omitempty"`
	FixedVersions    []string                          `json:"fixedVersions,omitempty"`
	DiffID           *string                           `json:"diffID,omitempty"`
	Description      *string                           `json:"description,omitempty"`
	Severity         *string                           `json:"severity,omitempty"`
	References       []string                          `json:"references,omitempty"`
	CVSS             map[string]CVSSApplyConfiguration `json:"cvss,omitempty"`
	Suppressed       *bool                             `json:"suppressed,omitempty"`
	VEXStatus        *VEXStatusApplyConfiguration      `json:"vexStatus,omitempty"`
}

// VulnerabilityApplyConfiguration constructs a declarative configuration of the Vulnerability type for use with
// apply.
func Vulnerability() *VulnerabilityApplyConfiguration {
	return &VulnerabilityApplyConfiguration{}
}

// WithCVE sets the CVE field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CVE field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithCVE(value string) *VulnerabilityApplyConfiguration {
	b.CVE = &value
	return b
}

// WithTitle sets the Title field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Title field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithTitle(value string) *VulnerabilityApplyConfiguration {
	b.Title = &value
	return b
}

// WithPackageName sets the PackageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PackageName field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithPackageName(value string) *VulnerabilityApplyConfiguration {
	b.PackageName = &value
	return b
}

// WithPackagePath sets the PackagePath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PackagePath field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithPackagePath(value string) *VulnerabilityApplyConfiguration {
	b.PackagePath = &value
	return b
}

// WithPURL sets the PURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PURL field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithPURL(value string) *VulnerabilityApplyConfiguration {
	b.PURL = &value
	return b
}

// WithInstalledVersion sets the InstalledVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstalledVersion field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithInstalledVersion(value string) *VulnerabilityApplyConfiguration {
	b.InstalledVersion = &value
	return b
}

// WithFixedVersions adds the given value to the FixedVersions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FixedVersions field.
func (b *VulnerabilityApplyConfiguration) WithFixedVersions(values ...string) *VulnerabilityApplyConfiguration {
	for i := range values {
		b.FixedVersions = append(b.FixedVersions, values[i])
	}
	return b
}

// WithDiffID sets the DiffID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiffID field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithDiffID(value string) *VulnerabilityApplyConfiguration {
	b.DiffID = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithDescription(value string) *VulnerabilityApplyConfiguration {
	b.Description = &value
	return b
}

// WithSeverity sets the Severity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Severity field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithSeverity(value string) *VulnerabilityApplyConfiguration {
	b.Severity = &value
	return b
}

// WithReferences adds the given value to the References field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the References field.
func (b *VulnerabilityApplyConfiguration) WithReferences(values ...string) *VulnerabilityApplyConfiguration {
	for i := range values {
		b.References = append(b.References, values[i])
	}
	return b
}

// WithCVSS puts the entries into the CVSS field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CVSS field,
// overwriting an existing map entries in CVSS field with the same key.
func (b *VulnerabilityApplyConfiguration) WithCVSS(entries map[string]CVSSApplyConfiguration) *VulnerabilityApplyConfiguration {
	if b.CVSS == nil && len(entries) > 0 {
		b.CVSS = make(map[string]CVSSApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.CVSS[k] = v
	}
	return b
}

// WithSuppressed sets the Suppressed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suppressed field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithSuppressed(value bool) *VulnerabilityApplyConfiguration {
	b.Suppressed = &value
	return b
}

// WithVEXStatus sets the VEXStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VEXStatus field is set to the value of the last call.
func (b *VulnerabilityApplyConfiguration) WithVEXStatus(value *VEXStatusApplyConfiguration) *VulnerabilityApplyConfiguration {
	b.VEXStatus = value
	return b
}
