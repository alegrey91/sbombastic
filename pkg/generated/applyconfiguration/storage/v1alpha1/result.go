// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	storagev1alpha1 "github.com/rancher/sbombastic/api/storage/v1alpha1"
)

// ResultApplyConfiguration represents a declarative configuration of the Result type for use
// with apply.
type ResultApplyConfiguration struct {
	Target          *string                           `json:"target,omitempty"`
	Class           *storagev1alpha1.Class            `json:"class,omitempty"`
	Type            *string                           `json:"type,omitempty"`
	Vulnerabilities []VulnerabilityApplyConfiguration `json:"vulnerabilities,omitempty"`
}

// ResultApplyConfiguration constructs a declarative configuration of the Result type for use with
// apply.
func Result() *ResultApplyConfiguration {
	return &ResultApplyConfiguration{}
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *ResultApplyConfiguration) WithTarget(value string) *ResultApplyConfiguration {
	b.Target = &value
	return b
}

// WithClass sets the Class field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Class field is set to the value of the last call.
func (b *ResultApplyConfiguration) WithClass(value storagev1alpha1.Class) *ResultApplyConfiguration {
	b.Class = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ResultApplyConfiguration) WithType(value string) *ResultApplyConfiguration {
	b.Type = &value
	return b
}

// WithVulnerabilities adds the given value to the Vulnerabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Vulnerabilities field.
func (b *ResultApplyConfiguration) WithVulnerabilities(values ...*VulnerabilityApplyConfiguration) *ResultApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVulnerabilities")
		}
		b.Vulnerabilities = append(b.Vulnerabilities, *values[i])
	}
	return b
}
